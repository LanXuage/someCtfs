diff --git a/src/builtins/builtins-array-gen.cc b/src/builtins/builtins-array-gen.cc
index 29bcae6feb..b5678a566a 100644
--- a/src/builtins/builtins-array-gen.cc
+++ b/src/builtins/builtins-array-gen.cc
@@ -2295,5 +2295,121 @@ TF_BUILTIN(InternalArrayNoArgumentConstructor_Packed, ArrayBuiltinsAssembler) {
   Return(array);
 }
 
+TF_BUILTIN(ArrayToNumber, CodeStubAssembler) {
+  Label not_array(this);
+  Label not_packed_elements(this);
+  Label out(this);
+  Label pre_loop(this);
+
+  Node* const context = Parameter(Descriptor::kContext);
+  Node* const maybe_array = Parameter(Descriptor::kArg);
+
+  GotoIf(TaggedIsSmi(maybe_array), &not_array);
+  GotoIfNot(IsJSArray(maybe_array), &not_array);
+
+  TNode<JSArray> array_receiver = CAST(maybe_array);
+  TNode<Int32T> elements_kind = LoadElementsKind(array_receiver);
+  // we only process array which contains smi or object
+  GotoIfNot(Int32LessThanOrEqual(elements_kind,
+                              Int32Constant(PACKED_ELEMENTS)),
+          &not_packed_elements);
+  
+  TNode<FixedArrayBase> elements = LoadElements(array_receiver);
+  TNode<FixedArray> elements_fixed_array = CAST(elements);
+
+  Node* length = LoadJSArrayLength(array_receiver);
+  
+  // ensure array length is greater than 0
+  GotoIfNumberGreaterThanOrEqual(SmiConstant(0), length, &out);
+  Goto(&pre_loop);
+  
+  BIND(&pre_loop);
+  TNode<JSArray> var_result_array;
+  TNode<Map> array_map = CAST(LoadContextElement(
+      context, Context::JS_ARRAY_PACKED_SMI_ELEMENTS_MAP_INDEX));
+  Node* array_length_untagged = SmiUntag(length);
+  var_result_array = AllocateJSArray(
+      HOLEY_ELEMENTS, array_map,
+      SmiTag(array_length_untagged), SmiTag(array_length_untagged));
+  TNode<FixedArrayBase> result_array_elements = LoadElements(var_result_array);
+  
+  VARIABLE(index, MachineType::PointerRepresentation(), SmiConstant(0));
+
+  Label loop(this, &index), loop_done(this);
+  Goto(&loop);
+
+  // Loop from 0 to length-1.
+  BIND(&loop);
+  {  
+    Label next(this);
+    Label value_oddball_or_symbol(this), value_jsreceiver_or_string_or_bigint(this), value_smi_or_heapnumber(this), value_other(this);
+    Label if_hole(this);
+    Label length_ok(this);
+
+    
+    Node* value = LoadFixedArrayElement(elements_fixed_array, index.value(), 0, INTPTR_PARAMETERS, LoadSensitivity::kSafe, CheckBounds::kDebugOnly);
+    GotoIf(TaggedIsSmi(value), &value_smi_or_heapnumber);
+    GotoIf(IsHeapNumber(value), &value_smi_or_heapnumber);
+    GotoIf(IsOddball(value), &value_oddball_or_symbol);
+    GotoIf(IsSymbol(value), &value_oddball_or_symbol);
+    GotoIf(IsJSReceiver(value), &value_jsreceiver_or_string_or_bigint);
+    GotoIf(IsString(value), &value_jsreceiver_or_string_or_bigint);
+    GotoIf(IsBigInt(value), &value_jsreceiver_or_string_or_bigint);
+    Goto(&value_other);
+
+    BIND(&value_smi_or_heapnumber);
+    StoreFixedArrayElement(CAST(result_array_elements), index.value(), value);
+    Goto(&next);
+
+    BIND(&value_oddball_or_symbol);
+    StoreFixedArrayElement(CAST(result_array_elements), index.value(), TheHoleConstant());
+    Goto(&next);
+
+    BIND(&value_jsreceiver_or_string_or_bigint);
+    TNode<Number> number = ToNumber_Inline(context, value);
+    // double check the array length!
+    Node* current_length = LoadJSArrayLength(array_receiver);
+    BranchIfNumberRelationalComparison(Operation::kEqual, current_length,
+                                        length, &length_ok,
+                                        &loop_done);
+
+    BIND(&length_ok);
+    StoreFixedArrayElement(CAST(result_array_elements), index.value(), number);
+    Goto(&next);
+
+    // Oh, value type doesn't match any thing, 
+    BIND(&value_other);
+    int32_t header_size = FixedDoubleArray::kHeaderSize - kHeapObjectTag;
+    TNode<IntPtrT> offset = ElementOffsetFromIndex(index.value(), HOLEY_DOUBLE_ELEMENTS, INTPTR_PARAMETERS, header_size);
+    TNode<Float64T> double_value = LoadDoubleWithHoleCheck(elements_fixed_array, offset, &if_hole, MachineType::Float64());
+    StoreFixedArrayElement(CAST(result_array_elements), index.value(), AllocateHeapNumberWithValue(double_value));
+    Goto(&next);
+
+    BIND(&if_hole);
+    StoreFixedArrayElement(CAST(result_array_elements), index.value(), TheHoleConstant());
+    Goto(&next);
+
+    BIND(&next);
+    Increment(&index);
+    GotoIf(IntPtrGreaterThanOrEqual(index.value(), array_length_untagged), &loop_done);
+    Goto(&loop);
+  }
+
+  BIND(&loop_done);
+  { 
+    Return(var_result_array);
+  }
+
+  BIND(&not_packed_elements);
+  Goto(&out);
+
+  BIND(&not_array);
+  Goto(&out);
+
+  BIND(&out);
+  Return(UndefinedConstant());
+
+}
+
 }  // namespace internal
 }  // namespace v8
diff --git a/src/builtins/builtins-definitions.h b/src/builtins/builtins-definitions.h
index 3412edb89d..295836d19d 100644
--- a/src/builtins/builtins-definitions.h
+++ b/src/builtins/builtins-definitions.h
@@ -318,6 +318,7 @@ namespace internal {
   CPP(ArrayConcat)                                                             \
   /* ES6 #sec-array.isarray */                                                 \
   TFJ(ArrayIsArray, 1, kReceiver, kArg)                                        \
+  TFJ(ArrayToNumber, 1, kReceiver, kArg)                                       \
   /* ES6 #sec-array.prototype.fill */                                          \
   CPP(ArrayPrototypeFill)                                                      \
   /* ES6 #sec-array.from */                                                    \
diff --git a/src/d8/d8.cc b/src/d8/d8.cc
index 163a660339..c8a5173687 100644
--- a/src/d8/d8.cc
+++ b/src/d8/d8.cc
@@ -1704,194 +1704,10 @@ Local<String> Shell::Stringify(Isolate* isolate, Local<Value> value) {
 
 Local<ObjectTemplate> Shell::CreateGlobalTemplate(Isolate* isolate) {
   Local<ObjectTemplate> global_template = ObjectTemplate::New(isolate);
-  global_template->Set(
-      String::NewFromUtf8(isolate, "print", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, Print));
-  global_template->Set(
-      String::NewFromUtf8(isolate, "printErr", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, PrintErr));
-  global_template->Set(
-      String::NewFromUtf8(isolate, "write", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, Write));
-  global_template->Set(
-      String::NewFromUtf8(isolate, "read", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, Read));
-  global_template->Set(
-      String::NewFromUtf8(isolate, "readbuffer", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, ReadBuffer));
-  global_template->Set(
-      String::NewFromUtf8(isolate, "readline", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, ReadLine));
-  global_template->Set(
-      String::NewFromUtf8(isolate, "load", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, Load));
   global_template->Set(
       String::NewFromUtf8(isolate, "setTimeout", NewStringType::kNormal)
           .ToLocalChecked(),
       FunctionTemplate::New(isolate, SetTimeout));
-  // Some Emscripten-generated code tries to call 'quit', which in turn would
-  // call C's exit(). This would lead to memory leaks, because there is no way
-  // we can terminate cleanly then, so we need a way to hide 'quit'.
-  if (!options.omit_quit) {
-    global_template->Set(
-        String::NewFromUtf8(isolate, "quit", NewStringType::kNormal)
-            .ToLocalChecked(),
-        FunctionTemplate::New(isolate, Quit));
-  }
-  Local<ObjectTemplate> test_template = ObjectTemplate::New(isolate);
-  global_template->Set(
-      String::NewFromUtf8(isolate, "testRunner", NewStringType::kNormal)
-          .ToLocalChecked(),
-      test_template);
-  test_template->Set(
-      String::NewFromUtf8(isolate, "notifyDone", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, NotifyDone));
-  test_template->Set(
-      String::NewFromUtf8(isolate, "waitUntilDone", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, WaitUntilDone));
-  // Reliable access to quit functionality. The "quit" method function
-  // installed on the global object can be hidden with the --omit-quit flag
-  // (e.g. on asan bots).
-  test_template->Set(
-      String::NewFromUtf8(isolate, "quit", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, Quit));
-
-  global_template->Set(
-      String::NewFromUtf8(isolate, "version", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, Version));
-  global_template->Set(
-      Symbol::GetToStringTag(isolate),
-      String::NewFromUtf8(isolate, "global", NewStringType::kNormal)
-          .ToLocalChecked());
-
-  // Bind the Realm object.
-  Local<ObjectTemplate> realm_template = ObjectTemplate::New(isolate);
-  realm_template->Set(
-      String::NewFromUtf8(isolate, "current", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, RealmCurrent));
-  realm_template->Set(
-      String::NewFromUtf8(isolate, "owner", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, RealmOwner));
-  realm_template->Set(
-      String::NewFromUtf8(isolate, "global", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, RealmGlobal));
-  realm_template->Set(
-      String::NewFromUtf8(isolate, "create", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, RealmCreate));
-  realm_template->Set(
-      String::NewFromUtf8(isolate, "createAllowCrossRealmAccess",
-                          NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, RealmCreateAllowCrossRealmAccess));
-  realm_template->Set(
-      String::NewFromUtf8(isolate, "navigate", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, RealmNavigate));
-  realm_template->Set(
-      String::NewFromUtf8(isolate, "detachGlobal", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, RealmDetachGlobal));
-  realm_template->Set(
-      String::NewFromUtf8(isolate, "dispose", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, RealmDispose));
-  realm_template->Set(
-      String::NewFromUtf8(isolate, "switch", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, RealmSwitch));
-  realm_template->Set(
-      String::NewFromUtf8(isolate, "eval", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, RealmEval));
-  realm_template->SetAccessor(
-      String::NewFromUtf8(isolate, "shared", NewStringType::kNormal)
-          .ToLocalChecked(),
-      RealmSharedGet, RealmSharedSet);
-  global_template->Set(
-      String::NewFromUtf8(isolate, "Realm", NewStringType::kNormal)
-          .ToLocalChecked(),
-      realm_template);
-
-  Local<ObjectTemplate> performance_template = ObjectTemplate::New(isolate);
-  performance_template->Set(
-      String::NewFromUtf8(isolate, "now", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, PerformanceNow));
-  global_template->Set(
-      String::NewFromUtf8(isolate, "performance", NewStringType::kNormal)
-          .ToLocalChecked(),
-      performance_template);
-
-  Local<FunctionTemplate> worker_fun_template =
-      FunctionTemplate::New(isolate, WorkerNew);
-  Local<Signature> worker_signature =
-      Signature::New(isolate, worker_fun_template);
-  worker_fun_template->SetClassName(
-      String::NewFromUtf8(isolate, "Worker", NewStringType::kNormal)
-          .ToLocalChecked());
-  worker_fun_template->ReadOnlyPrototype();
-  worker_fun_template->PrototypeTemplate()->Set(
-      String::NewFromUtf8(isolate, "terminate", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, WorkerTerminate, Local<Value>(),
-                            worker_signature));
-  worker_fun_template->PrototypeTemplate()->Set(
-      String::NewFromUtf8(isolate, "postMessage", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, WorkerPostMessage, Local<Value>(),
-                            worker_signature));
-  worker_fun_template->PrototypeTemplate()->Set(
-      String::NewFromUtf8(isolate, "getMessage", NewStringType::kNormal)
-          .ToLocalChecked(),
-      FunctionTemplate::New(isolate, WorkerGetMessage, Local<Value>(),
-                            worker_signature));
-  worker_fun_template->InstanceTemplate()->SetInternalFieldCount(1);
-  global_template->Set(
-      String::NewFromUtf8(isolate, "Worker", NewStringType::kNormal)
-          .ToLocalChecked(),
-      worker_fun_template);
-
-  Local<ObjectTemplate> os_templ = ObjectTemplate::New(isolate);
-  AddOSMethods(isolate, os_templ);
-  global_template->Set(
-      String::NewFromUtf8(isolate, "os", NewStringType::kNormal)
-          .ToLocalChecked(),
-      os_templ);
-
-  if (i::FLAG_expose_async_hooks) {
-    Local<ObjectTemplate> async_hooks_templ = ObjectTemplate::New(isolate);
-    async_hooks_templ->Set(
-        String::NewFromUtf8(isolate, "createHook", NewStringType::kNormal)
-            .ToLocalChecked(),
-        FunctionTemplate::New(isolate, AsyncHooksCreateHook));
-    async_hooks_templ->Set(
-        String::NewFromUtf8(isolate, "executionAsyncId", NewStringType::kNormal)
-            .ToLocalChecked(),
-        FunctionTemplate::New(isolate, AsyncHooksExecutionAsyncId));
-    async_hooks_templ->Set(
-        String::NewFromUtf8(isolate, "triggerAsyncId", NewStringType::kNormal)
-            .ToLocalChecked(),
-        FunctionTemplate::New(isolate, AsyncHooksTriggerAsyncId));
-    global_template->Set(
-        String::NewFromUtf8(isolate, "async_hooks", NewStringType::kNormal)
-            .ToLocalChecked(),
-        async_hooks_templ);
-  }
 
   return global_template;
 }
diff --git a/src/init/bootstrapper.cc b/src/init/bootstrapper.cc
index a080f8cdf0..63aecfd6a8 100644
--- a/src/init/bootstrapper.cc
+++ b/src/init/bootstrapper.cc
@@ -1651,6 +1651,7 @@ void Genesis::InitializeGlobal(Handle<JSGlobalObject> global_object,
     Handle<JSFunction> is_arraylike = SimpleInstallFunction(
         isolate_, array_function, "isArray", Builtins::kArrayIsArray, 1, true);
     native_context()->set_is_arraylike(*is_arraylike);
+    SimpleInstallFunction(isolate_, array_function, "toNumber", Builtins::kArrayToNumber, 1, true);
 
     SimpleInstallFunction(isolate_, array_function, "from",
                           Builtins::kArrayFrom, 1, false);
