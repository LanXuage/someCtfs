# 0b10000000 * (0b1111111 + 41) = 21504
# 0b10000001 * (0b1111110 + 41) = 21543
# 0b10000010 * (0b1111101 + 41) = 21580
# 0b10000011 * (0b1111100 + 41) = 21615
# 0b10000100 * (0b1111011 + 41) = 21648
# 0b10000101 * (0b1111010 + 41) = 21679
# 0b10000110 * (0b1111001 + 41) = 21708
# 0b10000111 * (0b1111000 + 41) = 21735
# 0b10001000 * (0b1110111 + 41) = 21760
# 0b10001001 * (0b1110110 + 41) = 21783
# 0b10001010 * (0b1110101 + 41) = 21804
# 0b10001011 * (0b1110100 + 41) = 21823
# 0b10001100 * (0b1110011 + 41) = 21840
# 0b10001101 * (0b1110010 + 41) = 21855
# 0b10001110 * (0b1110001 + 41) = 21868
# 0b10001111 * (0b1110000 + 41) = 21879
# 0b10010000 * (0b1101111 + 41) = 21888
# 0b10010001 * (0b1101110 + 41) = 21895
# 0b10010010 * (0b1101101 + 41) = 21900
# 0b10010011 * (0b1101100 + 41) = 21903
# 0b10010100 * (0b1101011 + 41) = 21904
# 0b10010101 * (0b1101010 + 41) = 21903
# 0b10010110 * (0b1101001 + 41) = 21900
# 0b10010111 * (0b1101000 + 41) = 21895
# 0b10011000 * (0b1100111 + 41) = 21888
# 0b10011001 * (0b1100110 + 41) = 21879
# 0b10011010 * (0b1100101 + 41) = 21868
# 0b10011011 * (0b1100100 + 41) = 21855
# 0b10011100 * (0b1100011 + 41) = 21840
# 0b10011101 * (0b1100010 + 41) = 21823
# 0b10011110 * (0b1100001 + 41) = 21804
# 0b10011111 * (0b1100000 + 41) = 21783
# 0b10100000 * (0b1011111 + 41) = 21760
# 0b10100001 * (0b1011110 + 41) = 21735
# 0b10100010 * (0b1011101 + 41) = 21708
# 0b10100011 * (0b1011100 + 41) = 21679
# 0b10100100 * (0b1011011 + 41) = 21648
# 0b10100101 * (0b1011010 + 41) = 21615
# 0b10100110 * (0b1011001 + 41) = 21580
# 0b10100111 * (0b1011000 + 41) = 21543
# 0b10101000 * (0b1010111 + 41) = 21504
# 0b10101001 * (0b1010110 + 41) = 21463
# 0b10101010 * (0b1010101 + 41) = 21420
# 0b10101011 * (0b1010100 + 41) = 21375
# 0b10101100 * (0b1010011 + 41) = 21328
# 0b10101101 * (0b1010010 + 41) = 21279
# 0b10101110 * (0b1010001 + 41) = 21228
# 0b10101111 * (0b1010000 + 41) = 21175
# 0b10110000 * (0b1001111 + 41) = 21120
# 0b10110001 * (0b1001110 + 41) = 21063


def adlit(x):
    l = len(bin(x)[2:])
    return (2 ** l - 1) ^ x

nbit = 1024 #求取每个不同bit位的最大n值或者最小n值与题目n比对，就能算出p的bit位数是1024
offset = 31337

# 算取nbit位p的n的峰值
maxN_p = 2**(nbit - 1) + int(offset/2) 
maxN = maxN_p * q
if maxN < n:
    return

# 判断n在nbit的峰值前还是峰值后
maxN_p = 2**(nbit - 1)
q = adlit(maxN_p) + offset
maxN = maxN_p * q
maxN > n

# 取中间数
maxN_p = 2**(nbit - 1) + int(offset/2) + int(offset/2)
q = adlit(maxN_p) + offset
maxN = maxN_p * q
for i in range(1, 1024):
    if maxN == n: # 找到
        print(maxN_p, q)
        break
    elif maxN > n:  # 所取中间数比实际n大
        maxN_p += 2**(nbit - i - 1)
        print(maxN_p)
    else:  # 所取中间数比实际n小
        maxN_p -= 2**(nbit - i - 1)
    q = adlit(maxN_p) + offset
    maxN = maxN_p * q

print('q = ' + str(q))
print('maxN_p = ' + str(maxN_p))

# q = 87834916545113015336000964296144306577174555879027549345134855850783246277838709952680829156347468418886211490335525241607253688425417142115840218894244902812798763051744684655923207165455737209507609386779708842318917975391900956941587572141475884466544826179681669143055208345737430546444402480246313669813
# maxN_p = 91934396941118575436929554782758166784623142015203107928295225306949429527662253180027648166060067602233902389535868116051536080388999480377007211745229221564969130373120800620379012435790356909945473565305296926519232706950561924532325538399351352696805684504904629096892037592742285758390953849377910498739
